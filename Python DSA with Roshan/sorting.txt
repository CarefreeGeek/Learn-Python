Python provides several sorting algorithms, either implemented directly or indirectly through libraries. These algorithms can be classified into two main categories: **built-in methods** and **custom implementations**. 

### 1. **Built-in Sorting Algorithms**
   - **`sorted()`**: A built-in function that returns a new sorted list.
   - **`list.sort()`**: A method that sorts a list in place.
     - Both use the **Timsort algorithm**, which is a hybrid of merge sort and insertion sort. It is efficient with real-world data due to its ability to exploit existing order.

### 2. **Sorting Algorithms in Libraries**
   If you're implementing or experimenting with sorting algorithms, Python libraries like `numpy`, `pandas`, and `scipy` offer more options:
   - **`numpy.sort()`**: Uses quicksort, mergesort, or heapsort, selectable via the `kind` parameter.
   - **`scipy.sort()`**: Offers advanced sorting utilities for arrays.
   - **`pandas.sort_values()`**: Specifically for sorting data in a DataFrame or Series.

### 3. **Custom Sorting Algorithms**
   Python supports implementing all standard sorting algorithms manually:
   - **Bubble Sort**
   - **Selection Sort**
   - **Insertion Sort**
   - **Merge Sort**
   - **Quick Sort**
   - **Heap Sort**
   - **Shell Sort**
   - **Radix Sort**
   - **Counting Sort**
   - **Bucket Sort**
   - **Cocktail Shaker Sort**
   - **Gnome Sort**
   - **Comb Sort**
   - And more...

### Summary
While Python natively uses Timsort for general-purpose sorting, you can implement or use library-provided versions of most classical sorting algorithms. The number of sorting algorithms isn't fixed—it depends on what you choose to implement or explore. For practical purposes, **Timsort** (via `sorted()` or `list.sort()`) is the default and most widely used in Python applications.



Here’s a comprehensive list of sorting algorithms commonly implemented in Python as **custom sorting algorithms**:

---

### **1. Simple Comparison-based Sorting Algorithms**
1. **Bubble Sort**
   - Repeatedly swaps adjacent elements if they are in the wrong order.

2. **Selection Sort**
   - Selects the smallest (or largest) element from the unsorted part and moves it to the sorted part.

3. **Insertion Sort**
   - Builds the sorted array one element at a time by inserting elements into their correct positions.

4. **Cocktail Shaker Sort** (or Bidirectional Bubble Sort)
   - A variation of Bubble Sort that goes both directions (left-to-right and right-to-left).

5. **Gnome Sort**
   - Similar to insertion sort but moves elements back to the correct place like a "gnome" sorting flower pots.

6. **Odd-Even Sort** (or Brick Sort)
   - A parallel sorting algorithm that works by comparing and swapping elements in odd-even pairs.

---

### **2. Divide and Conquer Sorting Algorithms**
7. **Merge Sort**
   - Divides the array into halves, sorts each recursively, and merges the sorted halves.

8. **Quick Sort**
   - Selects a pivot element and partitions the array into two halves around the pivot, then sorts recursively.

---

### **3. Efficient Comparison-based Sorting Algorithms**
9. **Heap Sort**
   - Builds a max-heap and extracts the maximum element repeatedly to sort.

10. **Shell Sort**
    - A generalization of insertion sort that allows the comparison of elements far apart (using gap sequences).

11. **Tim Sort**
    - A hybrid sorting algorithm combining Merge Sort and Insertion Sort. Python's default `sorted()` and `list.sort()` use this.

---

### **4. Non-Comparison-based Sorting Algorithms**
12. **Counting Sort**
    - Counts the occurrences of each value and uses the counts to place elements directly in sorted order. Works only for integers or discrete objects.

13. **Radix Sort**
    - Sorts numbers digit by digit, starting from the least significant digit to the most significant.

14. **Bucket Sort**
    - Distributes elements into buckets, sorts each bucket individually (usually with another algorithm), and merges the buckets.

15. **Pigeonhole Sort**
    - Places elements into holes (slots) and retrieves them in order. Suitable for limited integer ranges.

---

### **5. Advanced or Specialized Sorting Algorithms**
16. **Bitonic Sort**
    - A parallel sorting algorithm suitable for hardware implementations like GPUs.

17. **Cycle Sort**
    - Works by placing elements in their correct position in a single pass. It minimizes memory writes, making it useful for in-place sorting.

18. **Flash Sort**
    - Divides the array into classes and sorts them using a mapping strategy.

19. **Comb Sort**
    - Improves Bubble Sort by comparing elements separated by a gap and reducing the gap over iterations.

20. **Patience Sort**
    - Inspired by the card game "patience" (solitaire). Used for finding the longest increasing subsequence.

---

### **6. Hybrid Sorting Algorithms**
21. **Introsort**
    - Starts with Quick Sort, switches to Heap Sort when recursion depth exceeds a level, and uses Insertion Sort for small arrays.

22. **Strand Sort**
    - Divides the array into strands (sorted subsequences), then merges them.

---

### **Rare or Obsolete Algorithms**
23. **Stooge Sort**
    - A recursive, inefficient sorting algorithm (used mostly as a teaching tool).

24. **Pancake Sort**
    - Flips subsets of the array like flipping pancakes to sort it.

25. **Slow Sort**
    - A deliberately inefficient recursive algorithm for educational purposes.

---

### Summary
These algorithms cover the entire range of sorting methods from simple educational tools to highly efficient techniques. Depending on the data, constraints (time, space, or stability), and application, you can pick the most appropriate algorithm. For Python coding, you'll typically find Timsort, Quick Sort, Merge Sort, and Heap Sort to be the most practical and widely used.